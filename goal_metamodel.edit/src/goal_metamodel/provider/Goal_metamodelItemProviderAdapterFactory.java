/**
 */
package goal_metamodel.provider;

import goal_metamodel.util.Goal_metamodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Goal_metamodelItemProviderAdapterFactory extends Goal_metamodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Goal_metamodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.Decomposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecompositionItemProvider decompositionItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.Decomposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecompositionAdapter() {
		if (decompositionItemProvider == null) {
			decompositionItemProvider = new DecompositionItemProvider(this);
		}

		return decompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.DependencyLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependencyLinkItemProvider dependencyLinkItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.DependencyLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependencyLinkAdapter() {
		if (dependencyLinkItemProvider == null) {
			dependencyLinkItemProvider = new DependencyLinkItemProvider(this);
		}

		return dependencyLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.LogicalPrecedence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalPrecedenceItemProvider logicalPrecedenceItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.LogicalPrecedence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalPrecedenceAdapter() {
		if (logicalPrecedenceItemProvider == null) {
			logicalPrecedenceItemProvider = new LogicalPrecedenceItemProvider(this);
		}

		return logicalPrecedenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.TemporalLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalLinkItemProvider temporalLinkItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.TemporalLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalLinkAdapter() {
		if (temporalLinkItemProvider == null) {
			temporalLinkItemProvider = new TemporalLinkItemProvider(this);
		}

		return temporalLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.TemporalPrecedence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemporalPrecedenceItemProvider temporalPrecedenceItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.TemporalPrecedence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemporalPrecedenceAdapter() {
		if (temporalPrecedenceItemProvider == null) {
			temporalPrecedenceItemProvider = new TemporalPrecedenceItemProvider(this);
		}

		return temporalPrecedenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.TimeoutLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeoutLinkItemProvider timeoutLinkItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.TimeoutLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeoutLinkAdapter() {
		if (timeoutLinkItemProvider == null) {
			timeoutLinkItemProvider = new TimeoutLinkItemProvider(this);
		}

		return timeoutLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.TimeDifferenceLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeDifferenceLinkItemProvider timeDifferenceLinkItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.TimeDifferenceLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeDifferenceLinkAdapter() {
		if (timeDifferenceLinkItemProvider == null) {
			timeDifferenceLinkItemProvider = new TimeDifferenceLinkItemProvider(this);
		}

		return timeDifferenceLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.Contribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContributionItemProvider contributionItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.Contribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContributionAdapter() {
		if (contributionItemProvider == null) {
			contributionItemProvider = new ContributionItemProvider(this);
		}

		return contributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.ContextCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextConditionItemProvider contextConditionItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.ContextCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextConditionAdapter() {
		if (contextConditionItemProvider == null) {
			contextConditionItemProvider = new ContextConditionItemProvider(this);
		}

		return contextConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.Goal_Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Goal_ModelItemProvider goal_ModelItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.Goal_Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoal_ModelAdapter() {
		if (goal_ModelItemProvider == null) {
			goal_ModelItemProvider = new Goal_ModelItemProvider(this);
		}

		return goal_ModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.ResourceDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceDependencyItemProvider resourceDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.ResourceDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceDependencyAdapter() {
		if (resourceDependencyItemProvider == null) {
			resourceDependencyItemProvider = new ResourceDependencyItemProvider(this);
		}

		return resourceDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.Resource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.Resource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.ParallelNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelNodeItemProvider parallelNodeItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.ParallelNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelNodeAdapter() {
		if (parallelNodeItemProvider == null) {
			parallelNodeItemProvider = new ParallelNodeItemProvider(this);
		}

		return parallelNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.ParallelLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelLinkItemProvider parallelLinkItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.ParallelLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelLinkAdapter() {
		if (parallelLinkItemProvider == null) {
			parallelLinkItemProvider = new ParallelLinkItemProvider(this);
		}

		return parallelLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.GoalNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalNodeItemProvider goalNodeItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.GoalNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalNodeAdapter() {
		if (goalNodeItemProvider == null) {
			goalNodeItemProvider = new GoalNodeItemProvider(this);
		}

		return goalNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.ControlNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlNodeItemProvider controlNodeItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.ControlNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlNodeAdapter() {
		if (controlNodeItemProvider == null) {
			controlNodeItemProvider = new ControlNodeItemProvider(this);
		}

		return controlNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link goal_metamodel.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link goal_metamodel.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (nodeItemProvider != null) nodeItemProvider.dispose();
		if (decompositionItemProvider != null) decompositionItemProvider.dispose();
		if (dependencyLinkItemProvider != null) dependencyLinkItemProvider.dispose();
		if (logicalPrecedenceItemProvider != null) logicalPrecedenceItemProvider.dispose();
		if (temporalLinkItemProvider != null) temporalLinkItemProvider.dispose();
		if (temporalPrecedenceItemProvider != null) temporalPrecedenceItemProvider.dispose();
		if (timeoutLinkItemProvider != null) timeoutLinkItemProvider.dispose();
		if (timeDifferenceLinkItemProvider != null) timeDifferenceLinkItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (contributionItemProvider != null) contributionItemProvider.dispose();
		if (contextConditionItemProvider != null) contextConditionItemProvider.dispose();
		if (goal_ModelItemProvider != null) goal_ModelItemProvider.dispose();
		if (resourceDependencyItemProvider != null) resourceDependencyItemProvider.dispose();
		if (resourceItemProvider != null) resourceItemProvider.dispose();
		if (parallelNodeItemProvider != null) parallelNodeItemProvider.dispose();
		if (parallelLinkItemProvider != null) parallelLinkItemProvider.dispose();
		if (goalNodeItemProvider != null) goalNodeItemProvider.dispose();
		if (controlNodeItemProvider != null) controlNodeItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
	}

}
